---
title: ""
pagetitle: nycb-75th-season
format:
  html:
    embed-resources: true
    css: www/style.css
editor: visual
execute:
  echo: false
  message: false
  warning: false
fontcolor: white
---

```{=html}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
<style>
body {
  background: linear-gradient(rgba(0,0,0,1) 30%, rgba(113,114,119,1) 100%);
  background-attachment: fixed;
  font-family: "Barlow", serif;
}
</style>
```
::: hid
::: right
```{=html}
<img src="www/nycb-logo-dark.jpeg" alt="New York City Ballet Official logo" style="
    width: 55mm;
"/>
```
:::

<h1 style="padding-top: 50px;">

New York City Ballet's 75th Season

</h1>

```{=html}
<h2 style="
    padding-top: -60px;
    padding-bottom: 5px;
">
```
2023-2024

</h2>
:::

<br>

::: fadein
New York City Ballet---the largest and one of the most renowned ballet companies in the United States---celebrated its 75th season from Fall 2023 to Spring 2024.

<details>

<br> **History**

Founded in 1948 by Georgian-American choreographer [George Balanchine](https://www.nycballet.com/discover/our-history/george-balanchine/) and [Lincoln Kirstein](https://www.nycballet.com/discover/our-history/lincoln-kirstein-1907-1996/), a cultural figure and businessman, the company quickly become known for its "athletic and contemporary" repertory style and its exceptional dancers[^1^](https://www.nycballet.com/about-us#:\~:text=New%20York%20City%20Ballet%20is,its%20athletic%20and%20contemporary%20style.). Balanchine and [Jerome Robbins](https://www.nycballet.com/discover/our-history/jerome-robbins/), whom Balanchine invited to serve as Assistant Artistic Director, went on to create dozens of choreographic works for the company over the span of thirty years and each respectively became renowned as choreographic geniuses[^2^](https://www.cbsnews.com/news/the-genius-of-balanchine-a-visual-breakdown/) [^3^](https://time.com/archive/6733288/a-made-in-the-u-s-a-genius-jerome-robbins-master-choreographer/) Their pieces continue to be iconic staples of the company, comprising the majority of the company's active repertory [^4^](https://www.nycballet.com/discover/our-history/).

**75th Anniversary**

The 75th anniversary focused its Fall 2023 and Winter 2024 seasons on showcasing Balanchine and Robbins to commemorate the company's history. It also wanted to highlight the company's future, showcasing repertory created between 1988 and today in the Winter and Spring 2024 season, with works by current day choreographers including, Christopher Wheeldon, Alexei Ratmansky, Kyle Abraham, Pam Tanowitz, Ulysses Dove, Albert Evans, William Forsythe, Justin Peck, Amy Hall Garner, and Tiler Peck.

This included four World Premieres:

-   "Dig the Say" (Justin Peck)
-   "Solitude" (Alexei Ratmansky)
-   "Underneath There is Light" (Amy Hall Garner - first piece for NYCB)
-   "Concerto for Two Pianos" (Tiler Peck - first piece for NYCB).

As Balanchine said: "I don't have a past. I have a continuous present. The past is part of the present, just as the future is. We exist in time."[^5^](https://playbill.com/article/how-new-york-city-ballet-is-celebrating-its-75th-anniversary)

</details>

**Explore the repertory performed in this celebratory season below.**
:::

<br>

```{r load-packages}
library(dplyr)
library(readr)
library(stringr)
library(reactable)
library(htmltools)
library(reactablefmtr)
```

```{r read-data}
rep_details <- 
  read_csv('./output_data/rep_detail.csv') %>%
  mutate(length = case_when(
          length == 'Act I: 1 hour 8 minutes, Act II: 32 minutes' ~ lubridate::hm('1 hour and 40 minutes'),
          # lubridate::parse_date_time won't parse if not made into an hour
          length == '60 minutes' ~ lubridate::hm('1 hour and 0 minutes'),
          T ~ lubridate::hm(ifelse(grepl('hr|hour', length), length, paste('0 hour', length)))
         )
  )

season <- 
  list.files(path = './raw_data/', pattern = "\\.csv$", full.names=TRUE) %>%
  rlang::set_names(str_extract(basename(.), 'Winter|Spring|Fall')) %>%
  purrr::map_dfr(~read_csv(.) %>% 
                   mutate(repertory = coalesce(repertory, 
                                               snakecase::to_sentence_case(`program name`))), 
                 .id = "season") %>%
  mutate(date = as.Date(paste0(date, '-', ifelse(season=="Fall", '2023', '2024')), "%d-%b-%Y"))

video_links <- read_csv('./output_data/links.csv')
```

```{r functions}
format_string <- function(x) {
  x <- str_replace_all(x, ', and', '<br>')
  x <- str_replace_all(x, ',', '<br>')
  x <- str_replace_all(x, ';', '<br><br>')
  x <- str_replace_all(x, ';', '<br><br>')
  x
}

### https://github.com/qagentur/table-contest-2022/blob/main/table.qmd#L111-L128
audio_player <- function(url) {
  embed <- 
    str_interp(glue::glue('
            <iframe style="border-radius:12px; margin-top:10px; margin-bottom:-20px;"
             src="{url}"
             width="60%" height="100" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write;
             encrypted-media; fullscreen; picture-in-picture"></iframe>')
            )
  return(ifelse(is.na(url), '', embed))
}
```

```{r data-joins}
# expand out program
expand_dets <-
  season %>%
  mutate(repertory = strsplit(repertory, split=', ', fixed=TRUE)) %>%
  tidyr::unnest(c(repertory)) %>%
  mutate(repertory = coalesce(repertory, snakecase::to_sentence_case(`program name`)),
         rep = stringr::str_replace_all(gsub("[.()â€™]", "",  repertory), " |/", "-"),
         #exceptions
         rep = case_when(
           rep == 'Errante' ~ 'errante-formerly-titled-tzigane',
           rep == 'Dig-the-Say' ~ 'new-j-peck',
           rep == 'Bitter-Earth' ~ 'this-bitter-earth',
           rep == 'Scenes-de-Ballet' ~ 'scenes-de-ballet-wheeldon',
           rep == 'The-Concert' ~ 'the-concert-or-the-perils-of-everybody',
           T ~ rep
         )
  ) %>%
  # join repetory details
  left_join(rep_details, by='rep') %>%
  # join video links
  left_join(video_links, by='rep') %>%
  # count number of times a rep was performed
  group_by(repertory) %>%
  mutate(perf_count = n(), all_dates = paste0(date, collapse = ", ")) %>% ungroup() %>%
  transmute(
    Repertory = repertory,
    Choreographer=choreography,
    Description = description_short,
    Date = as.Date(date, format="%b %d, %Y"),
    all_dates,
    Music = music,
    Composer = format_string(`music by`),
    Length = format(lubridate::parse_date_time(ifelse(!grepl('H', length), paste('0H', length), paste0('0', length)), 'HMS'), '%H hr %M min'),
    num_dancers,
    Premiere = format(lubridate::mdy(premiere_date), "%b %d, %Y"),
    premiere_place,
    `original cast` = format_string(`original cast`),
    Costumes = costumes,
    Set = format_string(set),
    Lighting = format_string(lighting),
    photo_url,
    link = col
    
  ) %>%
  slice_min(., by = 'Repertory', order_by=Date, with_ties=FALSE) %>%
  # reorder columns
  select(Repertory, Choreographer, Date, Length, num_dancers, Premiere, Music, Set,
         all_dates, Costumes, Lighting, Composer, premiere_place, `original cast`,
         photo_url, Description, link)
```

::: panel-tabset
## Preview

::: grid
::: g-col-4
```{ojs preview-description}
html`<br><br>
     <p style="font-style: italic; font-size: 20px;">${data.find(song => song.Repertory === repDropdown).Repertory}</p>
     ${data.find(song => song.Repertory === repDropdown).Description}<br><br>
     Premiered: ${data.find(song => song.Repertory === repDropdown).Premiere}<br><br>
     Choreographer: ${data.find(song => song.Repertory === repDropdown).Choreographer}
    `
```
:::

::: g-col-8
```{r js-data}
ojs_define(ojs_data = bind_rows(
            # video_links[1,] %>% mutate(rep = '') %>% rename(Repertory = rep, link = col),
            expand_dets %>% select(Repertory, Description, Premiere, Choreographer, photo_url, link))
           )
```

```{ojs js-dropdown}
data = transpose(ojs_data)

// Create a dropdown menu 
viewof repDropdown = Inputs.select(
  data.map(d => d.Repertory),
  {
    label: "Repertory",
    unique: true
  }

)
```

```{ojs js-selects}
sel = data.find(song => song.Repertory === repDropdown).link
photo = data.find(song => song.Repertory === repDropdown).photo_url
```

```{ojs js-return}
//| expandable: false
{
  if (sel === undefined) {
    // Handle the case when sel is undefined
    console.log(photo);
    return html`<img src="${photo}" alt="Stickman" width="530" height="466" style="margin-top: 30px;">`;
  } else {
    // Proceed with sel
    return html`<iframe width="600" height="400" src="${sel}" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" style="margin-top: 30px;"></iframe>`;
  }
}
```
:::
:::

## Table

```{r table}
options(reactable.theme = reactableTheme(
  color = "hsl(233, 9%, 87%)",
  backgroundColor = "hsl(233, 9%, 19%)", #121212
  borderColor = "hsl(233, 9%, 22%)",
  stripedColor = "hsl(233, 12%, 22%)",
  inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
  selectStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
  pageButtonHoverStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
  pageButtonActiveStyle = list(backgroundColor = "hsl(233, 9%, 28%)")
))

t <- reactable(
  class = "table",
  searchable = TRUE,
  showPageSizeOptions = TRUE,
  showSortIcon = TRUE,
  highlight = TRUE,
  compact = TRUE,
  fullWidth = TRUE,
  defaultPageSize = 7,
  pageSizeOptions = c(5, 7,16, 32, 50, 100),
  defaultColDef = colDef(headerClass = "header colheader"),
  expand_dets,
  columns = list(
    Repertory = colDef(
      minWidth=500, 
      align = "center", 
      html = TRUE, 
      sticky = "left",
      cell = function(value) {
        glue::glue('
        {htmltools::tags$p(strong(value), class = "label_rep")}
        { htmltools::tags$img(src = expand_dets[expand_dets$Repertory==value,]$photo_url[1], 
          width = "315", height = "283")}
        {audio_player(video_links %>% filter(Repertory == value) %>% pull(spotify))}')
      }
    ),
    Choreographer = colDef(
      aggregate = "unique", 
      minWidth=145, 
      align = "center"
    ),
    Description = colDef(
      aggregate = "unique", 
      minWidth=400, 
      align = "center", 
      show = FALSE
    ),
    Length = colDef(align = "center"),
    Music = colDef(
      minWidth=60, 
      cell = function(value) {''}, 
      align = "center", 
      details = function(index) {
        premiere <- expand_dets[index,] %>% select(Music, Composer)
        tbl <- reactable(premiere, 
                         style = list(background = 'hsl(233, 9%, 14%)'),
                         outlined = TRUE, highlight = TRUE, fullWidth = FALSE,
                         defaultColDef = colDef(minWidth = 400, align = 'center'),
                         columns = list(Composer = colDef(html = TRUE)))
        htmltools::div(style = list(`margin-left` = "250px"), tbl)
      }
    ),
    num_dancers = colDef(
      name = 'Number of Dancers', 
      align = "center"
    ),
    Date = colDef(
      name = "Performance Dates", 
      minWidth=140, 
      align = "center", 
      details = function(index) {
        dates <- 
          expand_dets %>% 
          .[index,] %>% 
          pull(all_dates) %>% 
          strsplit(., ', ') %>% 
          data.frame(.) %>% 
          rlang::set_names('Dates Performed') %>% 
          mutate(`Dates Performed` = as.Date(`Dates Performed`)) %>% 
          arrange(`Dates Performed`)
        tbl <- reactable(dates, 
                          outlined = TRUE, 
                          highlight = TRUE, 
                          fullWidth = FALSE, 
                          style = list(background = 'hsl(233, 9%, 14%)')
                        )
        htmltools::tagList(htmltools::div(style = list(`margin-left` = "250px"), tbl))
      }
    ),
    Premiere = colDef(
      minWidth=140, 
      align = "center", 
      details = function(index) {
        premiere <- expand_dets[index,] %>% select(Premiere, premiere_place, `original cast`)
        tbl <- reactable(premiere, 
                         outlined = TRUE, 
                         highlight = TRUE, 
                         fullWidth = FALSE,
                         style = list(background = 'hsl(233, 9%, 14%)'),
                         columns = list(Premiere = colDef(minWidth = 120),
                                        premiere_place = colDef(minWidth = 240, name = 'Place', align = 'center'), 
                                        `original cast` = colDef(minWidth = 420, name = 'Original Cast', html = TRUE)
                                        ))
        htmltools::div(style = list(`margin-left` = "250px"), tbl)
      }
    ),
    Set = colDef(
      minWidth=60, 
      cell = function(value) {''}, 
      align = "center", 
      details = function(index) {
        premiere <- expand_dets[index,] %>% select(Costumes, Set, Lighting)
        tbl <- reactable(premiere, 
                         outlined = TRUE, highlight = TRUE, fullWidth = FALSE,
                         style = list(background = 'hsl(233, 9%, 14%)'),
                         columns = list(Set = colDef(html = TRUE),
                                        Lighting = colDef(html = TRUE)
                                        ),
                         defaultColDef = colDef(minWidth = 200, align = 'center'))
        htmltools::div(style = list(`margin-left` = "250px"), tbl)
      }
    ),
    # https://stackoverflow.com/questions/69385382/use-image-in-reactable-expandable-row
    all_dates = colDef(show = FALSE),
    Costumes = colDef(show = FALSE),
    Lighting = colDef(show = FALSE),
    Composer = colDef(show = FALSE),
    premiere_place = colDef(show = FALSE),
    `original cast` = colDef(show = FALSE),
    `photo_url` = colDef(show = FALSE),
    Description = colDef(show = FALSE),
    link = colDef(show = FALSE)
  ),
  bordered = TRUE,
  details = function(index) {
      htmltools::tags$p(expand_dets[index,]$Description, 
                        style = list(`background-color` = 'hsl(233, 9%, 14%)'))
    }
)
```

```{js js-animation}
// code for text animation
// https://javascript.plainenglish.io/how-to-implement-animation-on-scroll-with-vanilla-javascript-655093a38059
const hidden_elements = document.querySelectorAll('.hid')
const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
        if(entry.isIntersecting){
            entry.target.classList.add('show');
        }
        else{
            entry.target.classList.remove('show')
        }
    })
});

hidden_elements.forEach(el => {
    observer.observe(el);
});
```

```{r show-table}
t
```
:::

<p class="footnote">This site is unofficial and unaffiliated with New York City Ballet.<br>Photographs are sourced from New York City Ballet's official website, https://www.nycballet.com/<br>and the NYCB block letter logo is registered trademark of New York City Ballet, Inc.<br><br>Code and data [here](https://github.com/kkakey/nycb-75th-season) --- webpage created by @kkakey</p>
